package cn.gov.cbrc.db;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Stack;

import cn.gov.cbrc.wh.log.Log;
import cn.gov.cbrc.wh.log.LogFactory;

public class SessionContext {
	final private static Log log = LogFactory.getLog(SessionContext.class);
	private Connection conn;
	private Stack<Transaction> transtack = new Stack<Transaction>();

	public SessionContext(Connection _conn) {
		conn = _conn;
	}

	public Connection getConnection() {
		return conn;
	}
	
	public void close() {

		if (conn != null && !existTransaction()) {
			try {
				if (!conn.isClosed())
					conn.close();
			} catch (SQLException e) {
				log.error("Close connection error!", e);
			}
		}

	}

	public Transaction createTransaction(int transType) {
		Transaction trans = null;

		if (Transaction.REQUIRES_NEW == transType) {

			if (this.existTransaction()) {
				throw new IllegalStateException("Transaction already opend!");
			}

		} else if (Transaction.REQUIRED == transType) {
			if (this.existTransaction()) {
				trans = this.lastTransaction();

			} else {
				throw new IllegalStateException(
						"A transaction context must provide!");
			}

		} else if (Transaction.SUPPORT == transType) {

			trans = new TransactionImpl(this, transType);

		} else if (Transaction.NONE == transType) {
			if (existTransaction()) {
				throw new IllegalStateException("Transaction exist!");
			} else {
				return null;
			}
		} else {
			throw new IllegalArgumentException("Transaction type unknow!");
		}

		transtack.push(trans);
		return trans;
	}

	public Transaction lastTransaction() {
		if (transtack.isEmpty()) {
			return null;
		} else {
			return transtack.peek();
		}
	}

	public void removeLast() {
		if (!transtack.isEmpty()) {
			transtack.pop();
		}
	}

	public boolean existTransaction() {
		return !transtack.isEmpty();
	}

	public boolean isOnlyTransaction() {
		return transtack.isEmpty();
	}

}
